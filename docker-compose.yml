version: '3.8'

services:
  # Java Backend Service
  java-backend:
    build:
      context: ./JavaBackend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - JDBC_DATABASE_POSTGRESQL_URL=your_database
      - JDBC_DATABASE_USERNAME=your_username
      - JDBC_DATABASE_PASSWORD=your_password
      - GRPC_SERVER_HOST=grpc-valid-service
      - GRPC_SERVER_PORT=50051
      - JWT_SECRET=your_secret
      - DEFAULT_ADMIN_PASSWORD=your_password
    depends_on:
      - postgres
      - grpc-valid-service
    restart: unless-stopped
    networks:
      - app-network

  # Python GRPC Service
  grpc-valid-service:
    build:
      context: ./GRPCValidService
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    environment:
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=50051
    restart: unless-stopped
    networks:
      - app-network

  # Python Client Service
  client-photo-detection:
    build:
      context: ./ClientPhotoDetection
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - JAVA_BACKEND_URL=http://java-backend:8080
    depends_on:
      - java-backend
    restart: unless-stopped
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=photo_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=12121212
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
